<?php
/*
 *  This file is part of the Quantum Unit Solutions development package.
 *
 *  (c) Quantum Unit Solutions <http://github.com/dmeikle/>
 *
 *  For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code.
 */

/**
 * Created by PhpStorm.
 * User: user
 * Date: 2/8/2018
 * Time: 8:36 PM
 */

namespace Gossamer\Ra\JWT\Filters;


use Gossamer\Essentials\Configuration\Exceptions\KeyNotSetException;
use Gossamer\Horus\Filters\AbstractFilter;
use Gossamer\Horus\Filters\FilterChain;
use Gossamer\Horus\Http\HttpRequest; use Gossamer\Horus\Http\HttpResponse;
use Gossamer\Ra\Exceptions\TokenExpiredException;
use Gossamer\Ra\JWT\TokenManager;

class DecryptJwtFilter extends AbstractFilter
{

    const KEY = 'Authorization';

    const IDENTIFIER = 'JWT ';

    public function execute(HttpRequest &$request, HttpResponse &$response, FilterChain &$chain) {

        try{
            $jwt = $this->getJwtHeader();

            $manager = new TokenManager($this->httpRequest);

            $item = $manager->getDecryptedJwtToken($jwt);
            $_SESSION = $item;

        }catch(KeyNotSetException $e) {

        }catch(TokenExpiredException $e) {
            throw new TokenExpiredException("JWT token expired", 401);
        }


        parent::execute($request, $response, $chain); // TODO: Change the autogenerated stub
    }

    private function getJwtHeader() {
        $headers = getallheaders();

        if(!array_key_exists(self::KEY, $headers)) {
            throw new KeyNotSetException('JWT missing from request headers');
        }

        //return it but strip the identifier from it - only the token string left
        return substr($headers[self::KEY], strlen(self::IDENTIFIER));
    }

    private function checkExpirationTime() {

    }
}