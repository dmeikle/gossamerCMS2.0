<?php
/*
 *  This file is part of the Quantum Unit Solutions development package.
 *
 *  (c) Quantum Unit Solutions <http://github.com/dmeikle/>
 *
 *  For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code.
 */

/**
 * Created by PhpStorm.
 * User: user
 * Date: 2/3/2018
 * Time: 10:09 PM
 */

namespace Gossamer\Ra\Security\Filters;


use Gossamer\Horus\Filters\AbstractFilter;
use Gossamer\Horus\Filters\FilterChain;
use Gossamer\Horus\Http\HttpRequest;
use Gossamer\Horus\Http\HttpResponse;
use Gossamer\Ra\Exceptions\InvalidFormTokenException;
use Gossamer\Ra\Security\FormToken;
use Gossamer\Ra\Security\Traits\FormTokenTrait;
use Gossamer\Essentials\Configuration\Traits\LoadConfigurationTrait;

class VerifyFormTokenFilter extends AbstractFilter
{
    use FormTokenTrait;
    use LoadConfigurationTrait;
    
    public function execute(HttpRequest &$request, HttpResponse &$response, FilterChain &$chain) {

        if(!$this->checkIgnoreDuringDebug()) {


            $token = $this->getToken();

            if ($token === false) {
                throw new InvalidFormTokenException('XSS token not present in submitted form');
            }

            $defaultToken = $this->getDefaultToken();

            $this->checkTokenValid($token, $defaultToken);
            $this->checkTokenDecayTime($token);
        }
        
        parent::execute($request, $response, $chain); // TODO: Change the autogenerated stub
    }
    
    private function checkIgnoreDuringDebug() {
        $config = $this->loadConfig($this->httpRequest->getSiteParams()->getConfigPath() . DIRECTORY_SEPARATOR . 'config.yml');
        if(array_key_exists('IGNORE_XSS_TOKENS', $config) && $config['IGNORE_XSS_TOKENS'] == 'true') {
            return true;
        }
        
        return false;
    }

    /**
     * checks a token to see if it is expired. Notifies event dispatcher if not found
     * in case system is configured to handle this type of event.
     *
     * @param FormToken $token
     */
    private function checkTokenDecayTime(FormToken $token) {
        $currentTime = time();
        $tokenTime = $token->getTimestamp();
        if (($currentTime - $tokenTime) > __MAX_DECAY_TIME) {
            $this->eventDispatcher->dispatch('all', 'token_expired');
        }
    }
    /**
     * checks to see if a token is valid. Notifies event dispatcher if not found
     * in case system is configured to handle this type of event.
     *
     * @param FormToken $token
     * @param FormToken $defaultToken
     */
    private function checkTokenValid(FormToken $token, FormToken $defaultToken) {
        if (!crypt($token->getTokenString(), $defaultToken->toString() == $defaultToken->toString())) {
            $this->eventDispatcher->dispatch('all', 'token_missing');
        }
    }

    /**
     *
     * @return \core\components\security\core\FormToken
     */
    private function getToken() {
        $token = unserialize(getSession('_form_security_token'));
        return $token;
    }
}